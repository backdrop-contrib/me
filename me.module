<?php
/**
 * @file
 *
 * Provides 'me' aliases to allow users to enter 'me' in common paths instead
 * of their user id.
 */

/**
 * Constants defining the different ways paths can be matched.
 */
// Exclude paths
define('ME_PATH_EXCLUDE', 0);

// Include paths
define('ME_PATH_INCLUDE', 1);

// PHP for paths
define('ME_PATH_PHP', 2);


/**
 * Implements hook_theme_registry_alter().
 *
 * There is a different registry version for each theme,
 * and this function will be called for each of them.
 */
function me_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['menu_item_link']['function'])) {
    // remember the original function
    $theme_registry['menu_item_link']['me_original_function'] =
      $theme_registry['menu_item_link']['function'];
    $theme_registry['menu_item_link']['function'] =
      'me_theme_menu_item_link';
  }
}


/**
 * Implementation of moduleName_preprocess_hook() for theme_menu_link.
 */
function me_preprocess_menu_link(&$vars) {
  _me_check_path($vars['element']);
}


/**
 * Helper function to check if a path can be rewritten or not.
 *
 * By this stage, the path is already rewritten, so we need to
 * reverse the process.
 *
 * @param &$link
 *   The link object to check.
 */
function _me_check_path(&$link) {
  // If the link has been rewritten, and we are not supposed to be handling this
  // path, then rewite it back to its original.
  if (isset($link['#href']) && config_get('me.settings', 'rewrite_link') &&
    !_me_handle_path($link['#href'])) {
    $path_parts = explode('/', $link['#href'], MENU_MAX_PARTS);

    // The wildcarded path will either be in $link['path'], or $link['router_path'].
    $wild_parts = explode('/', (isset($link['#original_link']['link_path']) ?
      $link['#original_link']['link_path'] :
      $link['#original_link']['router_path']), MENU_MAX_PARTS);

    // Go over each of the path parts and if one is equal to the me alias, make
    // sure it is a wildcard, and if so, switch it back out.
    foreach ($path_parts as $key => $val) {
      if (_me_is_alias($val) && $wild_parts[$key] == '%') {
        $path_parts[$key] = $GLOBALS['user']->uid;
      }
    }
    $link['#href'] = implode('/', $path_parts);
    $link['#original_link']['href'] = implode('/', $path_parts);
  }
}


/**
 * Implements hook_config_info().
 */
function me_config_info() {
  $prefixes['me.settings'] = array(
    'label' => t('Me Aliases settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}


/**
 * Helper function to check if me should handle a given path.
 *
 * @param $path
 *   The path to check
 *
 * @return boolean
 *   TRUE if the path is handled by the me module. FALSE otherwise.
 */
function _me_handle_path($path) {
  // Match path if necessary
  $paths = config_get('me.settings', 'paths');
  $path_rule = config_get('me.settings', 'path_rule');
  $path_match = TRUE;
  if (!empty($paths)) {
    if ($path_rule !== ME_PATH_PHP) {
      $path = backdrop_get_path_alias($_GET['q']);

      // Compare with the internal and path alias (if any).
      $path_match = backdrop_match_path($path, $paths);
      if ($path != $_GET['q']) {
        $path_match = $path_match || backdrop_match_path($_GET['q'], $paths);
      }

      // When $path_rule has a value of ME_PATH_EXCLUDE, then me works on all
      // paths except those listed in $paths. When set to ME_PATH_INCLUDE, it is
      // used only on those pages listed in $paths.
      $path_match = !($path_rule xor $path_match);
    }
    else {
      if (module_exists('php')) {
        $path_match = php_eval($paths);

      }
    }
  }

  return $path_match;
}


/**
 * A special menu callback function that either redirects to
 * a page with the uid in the path, or calls the real menu handler.
 *
 * @param $parts
 *   The menu parts we are working with.
 * @param $callback
 *   The page callback to call.
 * @param ...
 *   count($parts) arguments for each part of the actual path
 * @param ...
 *   Any extra arguments will be the real page arguments.
 *
 * @return mixed
 *   Whatever the real page callback returns.
 */
function me_handler($parts, $callback) {
  // Get the arguments, and shift off $parts and $callback.
  /* $parts and $callback are left here for compatibility, they are not going to
    be used after the fix for http://drupal.org/node/163004 4*/

  $args = func_get_args();

  $callback = array_shift($args);
  $parts = array_shift($args);

  // If we want the uid shown in the address bar, we need to do a redirect.
  if (config_get('me.settings', 'redirect') || _me_user_disabled() ||
    !_me_handle_path($_GET['q'])) {
    $redirect = FALSE;
    // Get the menu path arguments.
    $menu_parts = explode('/', $_GET['q'], MENU_MAX_PARTS);

    // Loop over each part. If it's a %me wildcard, then
    // check the corresponding menu part for the me alias,
    // if so, replace it out with the user id so we can redirect correctly.
    // If no changes are required, then call the required function.

    foreach ($parts as $key => $val) {
      if (0 === strpos($val, '%me') && _me_is_alias($menu_parts[$key])) {
        $redirect = TRUE;
        $menu_parts[$key] = $GLOBALS['user']->uid;
      }
    }

    if ($redirect) {
      $path = implode('/', $menu_parts);
      // Save on an extra redirect by also checking the anonymous redirect here.
      $redirect_path = config_get('me.settings', 'redirect_anonymous');
      if ($GLOBALS['user']->uid == 0 && !empty($redirect_path)) {
        $path = $redirect_path;
      }
      // While most user pages of the form user/me/... get sent to the login
      // page before ever getting to this point,  some pages (e.g., CiviCRM
      // Profile pages) do get to here, and calling them with a uid of 0 creates
      // badness. So, if we found a me alias in the path but the user is
      // anonymous, go to the login page, setting the originally requested path
      // as the desired destination.
      if (!$GLOBALS['user']->uid) {
        // Use the same message that we use for general 403 errors.
        $message = variable_get('ousa_403_default_msg', '');
        drupal_set_message(filter_xss_admin($message), 'warning');
        drupal_goto('user/login',
          array('query' => array('destination' => $_GET['q'])));
        return;
      }
      backdrop_goto($path);
    }
  }

  // Before going any further, set the current menu router item to include
  // paths with %user, which allows modules to use menu_get_object() instead
  // of arg() in blocks and the like.
  $router_item = menu_get_item();
  foreach ($router_item['load_functions'] as $index => $function) {
    // If the function is a me handled function, then swap the handler out with
    // user.
    if (0 === strpos($function, 'me')) {
      $router_item['load_functions'][$index] = 'user_load';
    }
  }
  menu_set_item($_GET['q'], $router_item);

  return call_user_func_array($callback, $args);
}


/**
 * Helper function to check if a user can have, and has me disabled.
 *
 * @return boolean
 *   TRUE if the user has me disabled. FALSE otherwise.
 */
function _me_user_disabled() {
  return config_get('me.settings', 'user_override') &&
    !empty($GLOBALS['user']->me_disable);
}


/**
 * Implements hook_menu_alter().
 */
function me_menu_alter(&$callbacks) {
    // Loop over each of the paths, finding all %user* loaders, and replace them
    // with a %me equivelant. This should catch all modules that use the
    // %user loader to load up user objects, which should be most well written
    // modules. Certainly all of core.
  $processed = array();
  // For now, we only handle known user loaders. I might make a module hook, or
  // a configuration area to allow these to be exteneded if users make the
  // requests.
  $handlers = array(
    '%user' => '%me',
    '%user_uid_optional' => '%me_uid_optional',
    '%user_category' => '%me_category',
  );
  foreach ($callbacks as $path => $data) {
    $found = FALSE;
    $parts = explode('/', $path, MENU_MAX_PARTS);
    foreach ($handlers as $user_handler => $me_handler) {
      if (isset($user_handler) && in_array($user_handler, $parts)) {
        $found = TRUE;
        break;
      }
    }

    if ($found) {
      // We need to make sure that the correct files are loaded up. when the
      // path is used.
      if (isset($data['file']) && !isset($data['file path'])) {
        $data['file path'] = backdrop_get_path('module', $data['module']);
      }

      // We need to find the right page callback and page arguments to make
      // the me handler work correctly.
      $new_parts = array();

      foreach ($parts as $key => $val) {
        if (array_key_exists($val, $handlers)) {
          $val = $handlers[$val];
        }
        $new_parts[] = $val;
      }
      $new_path = implode('/', $new_parts);

      // We need to be careful with load arguments due to
      // http://drupal.org/node/373568. We therefore only add load arguments if
      // there are some there already. The only load argument that needs to be
      // passed by reference is map. We make sure that we have map in the right
      // place to be passed by reference.
      if (isset($data['load arguments']) && is_array($data['load arguments'])) {
        // Find the current map index, and add our load arguments, putting map
        // in the place we expect it to be.
        if (FALSE !== ($map_index = array_search('%map', $data['load arguments']))) {
          unset($data['load arguments'][$map_index]);
          array_unshift($data['load arguments'], '%map', '%index',
            strval($map_index));
        }
      }

      // First, we need to find the parent.
      $parent_path = implode('/', array_slice($parts, 0, count($parts) - 1));
      if (!array_key_exists($parent_path, $callbacks)) {
        $parent_path = $path;
      }
      if (in_array($parent_path, $processed)) {
        $parts = explode('/', $new_path, MENU_MAX_PARTS);
        $parent_path = implode('/', array_slice($parts, 0, count($parts) - 1));
        if (!array_key_exists($parent_path, $callbacks)) {
          $parent_path = $path;
        }
      }
      if (isset($callbacks[$parent_path])) {
        $parent = $callbacks[$parent_path];
        if (!isset($data['page callback']) && isset($parent['page callback'])) {
          $data['page callback'] = $parent['page callback'];
          if (!isset($data['page arguments']) && isset($parent['page arguments'])) {
            $data['page arguments'] = $parent['page arguments'];
          }
          if (!isset($data['file']) && isset($parent['file'])) {
            $data['file'] = $parent['file'];
          }
          if (!isset($data['file path']) && isset($parent['file path'])) {
            $data['file path'] = $parent['file path'];
          }
        }
      }

      if (isset($data['page callback'])) {
        if (isset($data['page arguments']) && !is_array($data['page arguments'])) {
          $data['page arguments'] = array();
        }

        $parts = explode('/', $new_path, MENU_MAX_PARTS);
        if (isset($data['page arguments'])) {
          $data['page arguments'] = array_merge(
            array($data['page callback'], $parts), $data['page arguments']);
        }
        else {
          $data['page arguments'] = array($data['page callback'], $parts);
        }
        $data['page callback'] = 'me_handler';
      }

      // This is a hack added to the Drupal module that I don't quite understand
      // why it's needed. If it's not here, then these menu items end up in the
      // Backdrop admin bar, where they're superfluous. So we remove the menu
      // name and then all seems to work fine.
      //
      // The reason is explained in core function user_menu(). See explanation
      // in $items['user/%user']. Unfortunately, unassigning the items here has
      // the side effect of putting them into the User menu.
      if (isset($data['menu_name']) && $data['menu_name'] == 'management') {
        unset($data['menu_name']);
      }

      $callbacks[$new_path] = $data;
      unset($callbacks[$path]);
      $processed[] = $path;
    }
  }
}


/**
 * Helper function to set up arguments in menu load callbacks.
 */
function _me_load_arguments($uid, $map = NULL, $index = NULL,
  $map_index = FALSE, $args = array(), $function = 'user_load', $reset = FALSE) {

  global $user;
  static $cache = array();
  if ($reset) {
    $cache = array();
  }
  // We need to get all the arguments, remove our custom ones,
  // put %map in the right place, then call the menu load callback.
  array_splice($args, 0, min(4, count($args)));

  if (!is_null($map) && FALSE !== $map_index) {
    $insert = array(
      $map,
    );
    array_splice($args, $map_index, 0, $insert);
    $map[$index] = _me_check_arg($uid);
  }

  array_unshift($args, _me_check_arg($uid));

  // If we have a valid function to call, call it.
  $result = FALSE;
  if (function_exists($function)) {
    if ($function == 'user_load' || $function == 'user_category_load') {
      if (!isset($cache[$function][$args[0]])) {
        // Call user_load and store in cache:
        $cache[$function][$args[0]] = call_user_func_array($function, $args);
      }
      // Use cached user's object:
      $result = $cache[$function][$args[0]];
    }
    else {
      $result = call_user_func_array($function, $args);
    }
  }
  return $result;
}


/**
 * Menu load callback in place of user_load().
 */
function me_load($uid, $map = NULL, $index = NULL, $map_index = FALSE) {
  return _me_load_arguments($uid, $map, $index, $map_index);
}


/**
 * Menu load callback in place of user_uid_optional_load().
 */
function me_uid_optional_load($uid, $map = NULL, $index = NULL, $map_index = FALSE) {
  $args = func_get_args();
  if (!isset($uid)) {
    if (!$GLOBALS['user']->uid) {
      return;
    }
    $uid = $GLOBALS['user']->uid;
  }
  return _me_load_arguments($uid, $map, $index, $map_index, $args);
}


/**
 * Menu load callback in place of user_category_load().
 */
function me_category_load($uid, $map = NULL, $index = NULL, $map_index = FALSE) {
  $args = func_get_args();
  return _me_load_arguments($uid, $map, $index, $map_index, $args,
    'user_category_load');
}


/**
 * Menu to_arg function for %me.
 */
function me_to_arg($arg, $map, $index) {
  if ($arg == 'me') {
    $uid = $GLOBALS['user']->uid;
  }
  elseif (count($map) >= 2 && $map[0] == 'user' && $map[1] == '%') {
    // Special handling for user/% and user/%/* paths. This handles user links
    // that appear in the user menu (for example).
    $uid = $GLOBALS['user']->uid;
  }
  elseif ($arg == '%') {
    // Note that if the request page is, for example, a node page at node/*,
    // then the index in $original_map will be the node index, not the proper
    // user index (hence the preceding special case).
    $original_map = arg(NULL, $_GET['q']);
    if (isset($original_map[$index]) && is_numeric($original_map[$index]) &&
      user_load($original_map[$index])) {
      $uid = $original_map[$index];
    }
    else {
      $uid = user_uid_optional_to_arg($arg);
    }
  }
  else {
    $uid = $arg;
  }

  if (config_get('me.settings', 'rewrite_link') && !_me_user_disabled()) {
    $uid = ($uid == $GLOBALS['user']->uid) ? _me_get_me_alias() : $uid;
  }
  return $uid;
}


/**
 * Menu to_arg function for %me_uid_optional.
 */
function me_uid_optional_to_arg($arg, $map, $index) {
  return user_uid_optional_to_arg($arg);
}


/**
 * Menu to_arg function for %me_category.
 */
function me_category_to_arg($arg, $map, $index) {
  return me_to_arg($arg, $map, $index);
}


/**
 * A Helper function to check for the 'me' alias.
 *
 * @param $arg
 *   The argument to check.
 * @param $username
 *   If TRUE, will return the username instead of the users id.
 * @param $redirect
 *   When TRUE, anonymous users will be redirected if a path is available.
 *
 * @return mixed
 *   The current user id if a match is found, or the given argument
 *   if no match.
 */
function _me_check_arg($arg, $username = FALSE, $redirect = TRUE) {
  $return = _me_is_alias($arg) ? ($username ? $GLOBALS['user']->name : $GLOBALS['user']->uid) : $arg;
  $redirect_path = config_get('me.settings', 'redirect_anonymous');

  if ($redirect && $GLOBALS['user']->uid == 0 && !empty($redirect_path)) {
    // Copied from menu_get_item(). We can't call that here as it might cause a
    // recursion loop.
    $original_map = arg(NULL, $_GET['q']);
    $parts = array_slice($original_map, 0, MENU_MAX_PARTS);
    $ancestors = menu_get_ancestors($parts);

    if (($router_item = db_query_range('
      SELECT *
      FROM {menu_router}
      WHERE path IN (:ancestors)
      ORDER BY fit DESC
      ', 0, 1, array(':ancestors' => $ancestors))->fetchAssoc()) &&
        $router_item['page_callback'] == 'me_handler') {
      // Not unsetting the destination can cause evil redirect loops.
      unset($_GET['destination'], $_REQUEST['edit']['destination']);
      backdrop_goto($redirect_path);
    }
  }
  return $return;
}


/**
 * Helper function to return the me alias.
 *
 * @param $print_name
 *   Shows a friendly print name of the alias instead of the alias itself.
 *
 * @return string
 *   The me alias, token replaced if appropriate.
 */
function _me_get_me_alias($print = FALSE) {
  $alias = config_get('me.settings', 'alias');

  // Replace with any global tokens that might have been used in the alias.
  $replaced_alias = token_replace($alias);

  // They will not match if a replacement happened.
  if ($print && $replaced_alias != $alias) {
    $alias = ucwords(str_replace(array('-', '[', ']'), array(' ', ''), $alias));
  }
  else {
    $alias = $replaced_alias;
  }

  return $alias;
}


/**
 * A helper function to check if a string is equal to the 'me' alias.
 *
 * @param $arg
 *   The argument to check.
 *
 * @return boolean
 *   TRUE if the argument given is a 'me' alias. FALSE otherwise.
 */
function _me_is_alias($arg) {
  $compare_function = config_get('me.settings', 'case_insensitive') ?
    'strcasecmp' : 'strcmp';
  return $compare_function($arg, _me_get_me_alias()) === 0;
}


/**
 * Implements hook_menu().
 */
function me_menu() {
  $items = array();

  $items['admin/config/urls/me'] = array(
    'title' => "Me aliases",
    'description' => "Configure the 'me' aliases, and how they're matched.",
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('me_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'me.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function me_permission() {
  return array(
    'use PHP for me alias paths' => array(
      'title' => t('use PHP for me alias paths'),
      'description' => t('use PHP for me alias paths'),
    ),
  );
}


/**
 * Implements hook_user_categories().
 */
function me_user_categories() {
  if (config_get('me.settings', 'user_override')) {
    return array(
      array(
        'name' => 'me',
        'title' => t("'@me' alias", array('@me' => _me_get_me_alias(TRUE))),
        'weight' => 2,
      ),
    );
  }
}


/**
 * Implements hook_user_view().
 */
function me_user_view($account, $view_mode) {
  if (config_get('me.settings', 'user_override')) {
    $enabled = 'enabled';
    if (!empty($account->me_disable)) {
      $enabled = 'disabled';
    }

    $account->content['me'] = array(
      '#type' => 'markup',
      '#value' => t("'%me' aliases are $enabled for this account. Account user id is '@uid'.",
            array('%me' => _me_get_me_alias(TRUE), '@uid' => $account->uid)),
      '#weight' => 10,
    );
  }
}


/**
 * Implements hook_ctools_plugin_directory().
 */
function me_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}


/**
 * Implements hook_views_api().
 */
function me_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'me') . '/views',
  );
}


/**
 * Implements hook_autoload_info().
 */
function me_autoload_info() {
  return array(
    'me_plugin_argument_validate_me_alias' => 'views/handlers/me_plugin_argument_validate_me_alias.inc',
  );
}
